// File name: Project Programming P16 - AS (2016)
// Author: J. Vargas
// Last Changed: 30/11/2016

/*	
	THE DESCRIPTION ADDED ON THIS PROGRAM IS A SHORT AND BRIEF DESCRIPTION
	FOR FURTHER NEEDS AND A MORE INDEEPTH ANALISIS PLEASE SEND AN EMAIL.

 Brief Description: "This program, using a menu with different options
					will save profiles of students using their names, emails and phone numbers."

*/

#include "stdafx.h" // Please include the auto-generated header file from VS2013.
#include <iostream>
#include <string>
using namespace std;


const int SizeST = 10; //hardcoded variable of the amount of students. If more students needed, this variable may be changed


struct Student
{
	int StudentNum;
	struct Person
	{
		string FirstName;
		string LastName;
	}prs;
	string StuEmail;
	struct phone
	{
		int interCode;
		int CountryCode;
		int RegionalCode;
		int StuNum;
	}numb;

} student[SizeST];

Student init;

int StudentNum = 2016000;//student number that will generate the student's id.
int i=0;

Student Crd_stud(int StudentNum);

void Menu();
int search_me(Student student[], int i, int target);
void show_find(int finding);
void Output_Student (Student student[], int show);



int main()
{
	int select;
	do 
	{
		Menu();
		cin >> select;
		system("cls");
		switch (select)
		{
		case 1:
			{
				int maxStudents = SizeST, EndLoop = 1;
				while((maxStudents > 0) && (EndLoop != 0))
					{
						cout << maxStudents << " slots for students left! \n";
						StudentNum++;
						Crd_stud(StudentNum);
						student[i] = init;
						i++;

						cout << "\nTo add more students press 1, else press 0 to quit\n";
						cin >> EndLoop;
						maxStudents--;
						system("cls");

						if (maxStudents == 0)
							{
								cout << "you've reach the maximum amount of students\n"
									<< "\ngoing to menu...";
								system("pause");
							}
						if (EndLoop == 0)
						{
							cout << "Going back to the main menu"<<endl;
							i--;
							system("pause");
						}
					}

						


				break;
				}
				
		case 2:
			{
				char ext;
				do
				{
				int target=0,finding;

				//search_me(student, i, target); return type int that will be the "search engine" for the opertaions.
				finding = search_me(student, i, target);
				show_find(finding);
				cout << "\n(y/n Run the search again?) ";
				cin >> ext;

				}while((ext != 'n') && (ext != 'N'));
				system("cls");
				cout << "\nGoing back to the main menu\n";
				system("pause");
				break;
			}
		case 3:
			{
				for (int show=0; show <= i; show++)
				{
					Output_Student(student, show);		
				}
			
				system("pause");
				break;
			}
		default:
			{

				system("cls");
				cout << "The option you selected is wrong, please try again."<<endl;
				break;
			}
		}

	} while (select != 4);
	
	return 0;
}

void Menu()
{
	system("cls");
	cout << "********WELCOME TO THE STUDENT MANAGEMENT APPLICATION********"
		 << "\n\n         Please select one of the following:\n" << endl
		 << "[1] Create and add a student.\n"
		 << "[2] Search for a student by number.\n"
		 <<	"[3] Display the student list.\n"
		 << "[4] Exit the application.\n\n" << endl
		 << "Enter your choice: ";

}

void Output_Student (Student student[], int show)
{
	cout << "This is student number: " << student[show].StudentNum<< endl 
		 <<"Name:\t" << student[show].prs.FirstName << " " << student[show].prs.LastName <<endl
		 <<"Email: " << student[show].StuEmail << endl
		 <<"Phone Number: " << student[show].numb.interCode << student[show].numb.CountryCode <<"(" <<  student[show].numb.RegionalCode << ")" << student[show].numb.StuNum<< endl
		 <<endl<<"\n##################################\n"<<endl;
} 

Student Crd_stud(int StudentNum)
{
	cout << "\nThis is the student's number: \t" << StudentNum << endl
		<< "remember this number is autogenerated\n\n";

	init.StudentNum = StudentNum;
	
	cout << "\nPlease input :\nThe Student's First name : ";
	cin.ignore ( 80, '\n'); //flush done for get line. Fixes skipped lines.
	getline(cin,init.prs.FirstName);

	cout << "\nThe Student's last name : ";
	getline(cin,init.prs.LastName);

	cout << "\nThe Student's email address: ";
	getline(cin,init.StuEmail);

	//phone number starts here
	cout << "\nThe Student's phone number...\n \n__(___)_______ "
		 << "\n Please input the international code of the phone: ";

	cin >> init.numb.interCode;
	cout << init.numb.interCode <<"__(___)_______" 
		<< "\n The country code: ";

	cin >> init.numb.CountryCode;
	cout << init.numb.interCode << init.numb.CountryCode << "(___)_______"
		<<"\n The regional code: ";

	cin >> init.numb.RegionalCode;
	cout << init.numb.interCode << init.numb.CountryCode <<"(" <<  init.numb.RegionalCode << ")_______"<<"\n The home number: ";
	cin >> init.numb.StuNum;
	cout <<  init.numb.interCode << init.numb.CountryCode <<"(" <<  init.numb.RegionalCode << ")" << init.numb.StuNum<< endl;

	// phone number ends here

	return init;
}




int search_me(Student student[], int i, int target)
{
	cout << "Please input the number of the student you are searching for: "<<endl;
	cin >> target;
	
	 {

		  int index = 0;
		  bool found = false;
 
		 do
		  {
			   if (target == student[index].StudentNum)//compare the target to the studentnumber until found.
				 found = true;
			   else
				 index++;

		  } while ((!found) && (index < i)); //Try to find target with the inputed number,  if not found will be false and get out

		   if (found)//if found display the number of the index so the cout will show Student[index] as a result later
			 return index;
		   else
			return -1; //if nothing found, return -1.
	   
	 }
}

void show_find(int finding)
{
	
	if(finding == -1)
	{
		system("cls");
		cout << "\nYour number has not been found. Please try again" << endl;
	}
	else
	{
		system("cls");
		cout << "\nFound student number: " << student[finding].StudentNum << endl
		 <<"Name:\t" << student[finding].prs.FirstName << " " << student[finding].prs.LastName <<endl
		 <<"Email: " << student[finding].StuEmail << endl
		 <<"Phone Number: " << student[finding].numb.interCode << student[finding].numb.CountryCode <<"(" <<  student[finding].numb.RegionalCode << ")" << student[finding].numb.StuNum<< endl
		 <<endl;
	}
}
